General Notes
=============

* Most scripts here expect to be run from the root directory of a clone of
  this repository (the operations/dns repo).

* All of the python scripts require Python3 3.5+ (e.g. stretch python3)

TL;DR:
======

* Partial local CI:
** install the "tox" python module and run:
** tox -- -n
* Complete local CI:
** also install the latest WMF debian packaging of gdnsd to your laptop, run:
** tox

mock_etc
========

These are source files which supply mock versions of files usually deployed by
puppet on the real authdns servers.  They're just sufficient enough for basic
standalone CI checking.  Please be careful when editing these, as bringing
them out of sync with the deployed files from puppet can cause all sorts of
problems!

check-tabs.sh
=============

Checks for tabs in any files in the repo, which we don't allow by policy.
Just a shell script wrapper around "git grep".

zones_validator.py
==================

This validates zone data according to some WMF-specific policy rules, and
requires Python 3.5+ (which implies stretch, here!).  Add the argument "-e" to
actually display any errors found.  This needs the output files created by
gen-zones.py, therefore it's usually invoked indirectly as part of
deploy-check.py.

gen-zones.py
============

Requires: python3-git and python3-jinja2

This generates zonefiles from the zone templates.  If given a single argument
which is an empty directory, the output zones will be placed there.  With no
argument, the templating is done in memory only as a dry run, but not placed
anywhere on disk.  Usually invoked indirectly via deploy-check.py.

The zonefiles are always all fully generated from scratch with deterministic
serials and contents based on the latest git commits, and thus should lack
most of our previous woes with out-of-sync serials, language template updates,
etc.

deploy-check.py
===============

Requires: python3-git, python3-jinja2, and optionally gdnsd

This multi-purpose script does preflight deployment checks from anywhere, as
well as actual deployments on the dns server hosts themselves.  It uses
gen-zones.py for zonefile generation under the hood.

By default with no arguments it just performs CI testing of deployability.  It
creates a temporary directory and then fills it with zones generated by
gen-zones.py and a combination of real and mock configuration files from this
repository and executes CI checks including zone_validator.py, check_tabs.sh,
and gdnsd checkconf against all of it for validation.

The argument -n/--no-gdnsd skips the "checkconf" validation in all cases, and
skips any reload/replace operations in case of a real deploy.  Useful for
puppetized initial deployments of data before the gdnsd package is installed,
or for local runs of deploy-check.py on a machine with no gdnsd installation at
all (e.g. your laptop).

If given the argument -d/--deploy, it assumes the script is running on a real
authdns server host and attempts to actually deploy the repo's contents into
live use.  It does the same initial validation as the CI check above, except
that no mock configuration is used and instead the host's live copies of
puppet-deployed config files are pulled into the temporary testing directory
for a more concrete preflight checkconf validation.  If that succeeds, then the
updated files from this repo are deployed from the temporary staging directory
to the live production destinations and a gdnsdctl "replace" or "reload-zones"
is executed if either is warranted.

The argument -s/--skip-reload expects gdnsd to be installed and does run the
"checkconf" validation before deploying, but does not execute any post-deploy
gdnsd reload/replace commands.  Only useful with --deploy.

In typical scenarios, puppet's authdns-local-update will be what invokes this
in --deploy mode, but it is possible to use it directly in case of emergencies
making puppet, dns, and/or ssh unavailable.
