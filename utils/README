TESTME
General Notes
=============

* Most scripts here expect to be run from the root directory of a clone this
  repository (the operations/dns repo).

* All of the python scripts require Python3 3.5+ (e.g. stretch python3)

* TL;DR - if you want to run full CI validation locally on your checkout on
  your laptop, you need to get python3.5+ and the "git" and "jinja2" python
  modules, as well as an installation of gdnsd at the normal system paths (e.g.
  /usr/sbin/gdnsd), then run "utils/run_tests.sh" from the repo root.
  TODO: wrap this in a local dockerfile in this repo which makes that easy.

mock_etc
========

These are source files which supply mock versions of files usually deployed by
puppet on the real authdns servers.  They're just sufficient enough for basic
standalone CI checking.  Please be careful when editing these, as bringing
them out of sync with the deployed files from puppet can cause all sorts of
problems!

check-tabs.sh
=============

Checks for tabs in any files in the repo, which we don't allow by policy.
Just a shell script wrapper around "git grep".

zones_validator.py
==================

This validates zone data according to some WMF-specific policy rules, and
requires Python 3.5+ (which implies stretch, here!).  Add the argument "-e" to
actually display any errors found.

gen-zones.py
============

Requires: python3-git and python3-jinja2

This generates zonefiles from the zone templates.  If given a single argument
which is an empty directory, the output zones will be placed there.  With no
argument, the templating is done in memory only as a dry run, but not placed
anywhere on disk.  Usually invoked indirectly via deploy-check.py.

The zonefiles are always all fully generated from scratch with deterministic
serials and contents based on the latest git commits, and thus should lack
most of our previous woes with out-of-sync serials, language template updates,
etc.

deploy-check.py
===============

Requires: python3-git, python3-jinja2, and gdnsd

This multi-purpose script does preflight deployment checks from anywhere, as
well as actual deployments on the dns server hosts themselves.  It uses
gen-zones.py for zonefile generation under the hood.

By default with no arguments it just performs CI testing of deployability.  It
creates a temporary directory and then fills it with zones generated by
gen-zones.py and a combination of real and mock configuration files from this
repository and executes a gdnsd checkconf against all of it for validation.

If given the argument "--deploy", it assumes the script is running on a real
authdns server host and attempts to actually deploy the repo's contents into
live use.  It does the same initial validation as the CI check above, except
that no mock configuration is used and instead the host's live copies of
puppet-deployed config files are pulled into the temporary testing directory
for a more concrete preflight checkconf validation.  If that succeeds, then the
updated files from this repo are deployed from the temporary staging directory
to the live production destinations and a gdnsdctl "replace" or "reload-zones"
is executed if either is warranted.

In --deploy mode, there are also two other possible arguments: --skip-reload
avoids executing any gdnsdctl commands at the end, and --initial also skips the
actual checkconf (intended for use when imaging brand-new authdns servers, as
we deploy the DNS files before we install the software).

In typical scenarios, puppet's authdns-local-update will be what invokes this
in --deploy mode, but it is possible to use it directly in case of emergencies
making puppet, dns, and/or ssh unavailable.

utils/run-tests.sh
==================

Runs all of check-tabs.sh, "zone_validator.py -e", and deploy-check.py (even if
one fails, all will be run), then pulls their exit statuses together into a
final ERROR/OK output line and final exit status.  Assumes by default it is run
from the repo root, but can also take the pathname of the repo root as its only
argument.  This is what you want for a full-scope CI check of the repo.
